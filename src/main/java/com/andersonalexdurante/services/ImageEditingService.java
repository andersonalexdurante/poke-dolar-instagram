package com.andersonalexdurante.services;

import com.andersonalexdurante.dto.PokemonDTO;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.enterprise.context.ApplicationScoped;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;
import software.amazon.awssdk.core.SdkBytes;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.lambda.LambdaClient;
import software.amazon.awssdk.services.lambda.model.InvokeRequest;
import software.amazon.awssdk.services.lambda.model.InvokeResponse;

import java.io.*;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

@ApplicationScoped
public class ImageEditingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ImageEditingService.class);
    private static final String IMAGE_GENERATOR_LAMBDA_NAME = "poke-dolar-image-generator";

    private final ObjectMapper objectMapper = new ObjectMapper();

    public InputStream editPokemonImage(String requestId, String dollarExchangeRate, Boolean dollarup,
                                        PokemonDTO newPokemon, InputStream pokemonImageStream) {
        LOGGER.info("[{}] Starting image generation for Pokemon #{} - {}",
                requestId, newPokemon.number(), newPokemon.name());

        try (LambdaClient lambdaClient = LambdaClient.builder()
                .region(Region.US_EAST_2)
                .credentialsProvider(DefaultCredentialsProvider.create())
                .build()) {

            // Convert image to Base64
            byte[] imageBytes = pokemonImageStream.readAllBytes();
            String base64Image = Base64.getEncoder().encodeToString(imageBytes);
            LOGGER.debug("[{}] Image converted to Base64 ({} bytes)", requestId, imageBytes.length);

            // Create JSON payload
            Map<String, Object> payloadMap = new HashMap<>();
            payloadMap.put("image", base64Image);
            payloadMap.put("dollar_rate", dollarExchangeRate);
            payloadMap.put("dollar_up", dollarup);
            payloadMap.put("pokedex_number", newPokemon.number());
            payloadMap.put("pokemon_name", newPokemon.name());

            String jsonPayload = objectMapper.writeValueAsString(payloadMap);
            LOGGER.debug("[{}] JSON payload created: {}", requestId, jsonPayload.length());

            // Invoke Lambda function
            LOGGER.info("[{}] Invoking Lambda function: {}", requestId, IMAGE_GENERATOR_LAMBDA_NAME);
            InvokeRequest request = InvokeRequest.builder()
                    .functionName(IMAGE_GENERATOR_LAMBDA_NAME)
                    .payload(SdkBytes.fromUtf8String(jsonPayload))
                    .build();

            InvokeResponse response = lambdaClient.invoke(request);
            String responseJson = response.payload().asUtf8String();
            LOGGER.debug("[{}] Lambda response received: {}", requestId, responseJson.length());

            // Extract Base64 image from JSON response
            String base64OutputImage = extractBase64Image(responseJson);
            if (base64OutputImage == null) {
                LOGGER.error("[{}] Invalid Lambda response: {}", requestId, responseJson.length());
                throw new IOException("Invalid Lambda response");
            }

            // Decode Base64 response into InputStream
            byte[] outputBytes = Base64.getDecoder().decode(base64OutputImage);
            LOGGER.info("[{}] Image successfully generated by Lambda", requestId);

            return new ByteArrayInputStream(outputBytes);
        } catch (IOException e) {
            LOGGER.error("[{}] Failed to process image!", requestId, e);
            throw new RuntimeException("Failed to generate image", e);
        }
    }

    private String extractBase64Image(String jsonResponse) {
        try {
            JsonNode rootNode = objectMapper.readTree(jsonResponse);
            JsonNode bodyNode = rootNode.path("body");

            if (bodyNode.isTextual()) {
                bodyNode = objectMapper.readTree(bodyNode.asText());
            }

            String base64Image = bodyNode.path("image").asText(null);

            if (base64Image == null || base64Image.isEmpty()) {
                LOGGER.error("Failed to extract 'image' from body: {}", bodyNode);
                return null;
            }

            LOGGER.debug("Successfully extracted Base64 image.");
            return base64Image;

        } catch (Exception e) {
            LOGGER.error("Error extracting Base64 image from JSON response: {}", jsonResponse, e);
            return null;
        }
    }
}

